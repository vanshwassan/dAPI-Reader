{
  "language": "Solidity",
  "sources": {
    "@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../utils/interfaces/IExtendedSelfMulticall.sol\";\nimport \"../../protocol/interfaces/IAirnodeRequester.sol\";\n\ninterface IDapiServer is IExtendedSelfMulticall, IAirnodeRequester {\n    event SetRrpBeaconUpdatePermissionStatus(\n        address indexed sponsor,\n        address indexed requester,\n        bool status\n    );\n\n    event RequestedRrpBeaconUpdate(\n        bytes32 indexed beaconId,\n        address airnode,\n        bytes32 templateId,\n        address sponsor,\n        bytes32 requestId,\n        address requester\n    );\n\n    event RequestedRelayedRrpBeaconUpdate(\n        bytes32 indexed beaconId,\n        address airnode,\n        bytes32 templateId,\n        address relayer,\n        address sponsor,\n        bytes32 requestId,\n        address requester\n    );\n\n    event UpdatedBeaconWithRrp(\n        bytes32 indexed beaconId,\n        bytes32 requestId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event RegisteredBeaconUpdateSubscription(\n        bytes32 indexed beaconId,\n        bytes32 subscriptionId,\n        address airnode,\n        bytes32 templateId,\n        bytes conditions,\n        address relayer,\n        address sponsor\n    );\n\n    event UpdatedBeaconWithPsp(\n        bytes32 indexed beaconId,\n        bytes32 subscriptionId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedBeaconWithSignedData(\n        bytes32 indexed beaconId,\n        int224 value,\n        uint32 timestamp\n    );\n    event UpdatedBeaconWithDomainSignedData(\n        bytes32 indexed beaconId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedBeaconSetWithBeacons(\n        bytes32 indexed beaconSetId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedBeaconSetWithSignedData(\n        bytes32 indexed beaconSetId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedBeaconSetWithDomainSignedData(\n        bytes32 indexed dapiId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedOevProxyBeaconWithSignedData(\n        bytes32 indexed beaconId,\n        address indexed proxy,\n        bytes32 indexed updateId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedOevProxyBeaconSetWithSignedData(\n        bytes32 indexed beaconSetId,\n        address indexed proxy,\n        bytes32 indexed updateId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event Withdrew(\n        address indexed oevProxy,\n        address oevBeneficiary,\n        uint256 amount\n    );\n\n    event SetDapiName(\n        bytes32 indexed dataFeedId,\n        bytes32 indexed dapiName,\n        address sender\n    );\n\n    function setRrpBeaconUpdatePermissionStatus(\n        address rrpBeaconUpdateRequester,\n        bool status\n    ) external;\n\n    function requestRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRelayedRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRelayedRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function fulfillRrpBeaconUpdate(\n        bytes32 requestId,\n        uint256 timestamp,\n        bytes calldata data\n    ) external;\n\n    function registerBeaconUpdateSubscription(\n        address airnode,\n        bytes32 templateId,\n        bytes memory conditions,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 subscriptionId);\n\n    function conditionPspBeaconUpdate(\n        bytes32 subscriptionId,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) external view returns (bool);\n\n    function fulfillPspBeaconUpdate(\n        bytes32 subscriptionId,\n        address airnode,\n        address relayer,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external;\n\n    function updateBeaconSetWithBeacons(\n        bytes32[] memory beaconIds\n    ) external returns (bytes32 beaconSetId);\n\n    function conditionPspBeaconSetUpdate(\n        bytes32 subscriptionId,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) external view returns (bool);\n\n    function fulfillPspBeaconSetUpdate(\n        bytes32 subscriptionId,\n        address airnode,\n        address relayer,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external;\n\n    function updateDataFeedWithSignedData(bytes[] calldata signedData) external;\n\n    function updateDataFeedWithDomainSignedData(\n        bytes[] calldata signedData\n    ) external;\n\n    function updateOevProxyDataFeedWithSignedData(\n        address oevProxy,\n        bytes32 updateId,\n        uint256 signatureCount,\n        bytes[] calldata signedData\n    ) external payable;\n\n    function withdraw(address oevProxy) external;\n\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\n\n    function dapiNameToDataFeedId(\n        bytes32 dapiName\n    ) external view returns (bytes32);\n\n    function readDataFeedWithId(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithDapiNameHash(\n        bytes32 dapiNameHash\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithIdAsOevProxy(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithDapiNameHashAsOevProxy(\n        bytes32 dapiNameHash\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function aggregateBeacons(\n        bytes32[] memory beaconIds\n    ) external view returns (int224 value, uint32 timestamp);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function HUNDRED_PERCENT() external view returns (uint256);\n\n    function dapiNameSetterRole() external view returns (bytes32);\n\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\n        address sponsor,\n        address updateRequester\n    ) external view returns (bool);\n\n    function subscriptionIdToBeaconId(\n        bytes32 subscriptionId\n    ) external view returns (bytes32);\n\n    function dataFeeds(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function oevProxyToIdToDataFeed(\n        address proxy,\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function dapiNameHashToDataFeedId(\n        bytes32 dapiNameHash\n    ) external view returns (bytes32 dataFeedId);\n\n    function oevProxyToBalance(\n        address oevProxy\n    ) external view returns (uint256 balance);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/dapis/proxies/interfaces/IDapiProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IProxy.sol\";\n\ninterface IDapiProxy is IProxy {\n    function dapiNameHash() external view returns (bytes32);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/dapis/proxies/interfaces/IProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IDapiServer.sol\";\n\ninterface IProxy {\n    function read() external view returns (int224 value, uint32 timestamp);\n\n    function dapiServer() external view returns (address);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/protocol/interfaces/IAirnodeRequester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAirnodeRequester {\n    function airnodeProtocol() external view returns (address);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/interfaces/IExtendedSelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ISelfMulticall.sol\";\n\ninterface IExtendedSelfMulticall is ISelfMulticall {\n    function getChainId() external view returns (uint256);\n\n    function getBalance(address account) external view returns (uint256);\n\n    function getBlockNumber() external view returns (uint256);\n\n    function getBlockTimestamp() external view returns (uint256);\n\n    function getBlockBasefee() external view returns (uint256);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/interfaces/ISelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISelfMulticall {\n    function multicall(\n        bytes[] calldata data\n    ) external returns (bytes[] memory returndata);\n\n    function tryMulticall(\n        bytes[] calldata data\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ReadDapi.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@api3/airnode-protocol-v1/contracts/dapis/proxies/interfaces/IDapiProxy.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Reader is Ownable {\r\n    address dapiProxy;\r\n\r\n    function setDapiProxyAddress(address _proxyAddress) public onlyOwner {\r\n        dapiProxy = _proxyAddress;\r\n    }\r\n\r\n    function readDapi (int224 value, uint32 timestamp) public view returns (int224, uint32){\r\n        return IDapiProxy(dapiProxy).read();\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}